import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.utils import to_categorical


# 1. Lade MNIST

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()


# 2. Filtere nur Ziffern 1 bis 6

train_mask = np.isin(y_train, [1, 2, 3, 4, 5, 6])
test_mask = np.isin(y_test, [1, 2, 3, 4, 5, 6])
x_train, y_train = x_train[train_mask], y_train[train_mask]
x_test, y_test = x_test[test_mask], y_test[test_mask]


# 3. Normalisierung

x_train = x_train.reshape(-1, 28, 28, 1).astype("float32") / 255.0
x_test = x_test.reshape(-1, 28, 28, 1).astype("float32") / 255.0


# 4. Re-label: Ziffern 1â€“6 â†’ Klassen 0â€“5  
   
y_train -= 1
y_test -= 1
y_train = to_categorical(y_train, num_classes=6)
y_test = to_categorical(y_test, num_classes=6)


# 5. CNN-Modell
# Zusammenbau und Definition des Modells

model = models.Sequential([
	
	# HinzufÃ¼gen von Conv2D und MaxPooling2D mit einer Faltungsschicht von 32 Filtern und 3x3 Fenster
    layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),
	
	# Hier werden die Neuronen geÃ¤ndert, nennt sich hier 2. Convolution-Schicht
    layers.Conv2D(24, (3,3), activation='relu'), # Ã¤ndere hier die 1. Zahl (24 mmtn.), um die Schichten zu Ã¤ndern
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dropout(0.4),
    layers.Dense(6, activation='softmax')  # 6 Klassen: 1â€“6
])

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])


# 6. Training

model.fit(
    x_train, 
    y_train, 
    epochs=200, # TrainingsdurchlÃ¤ufe unter epochs (200 mmtn.), einfach die Zahl verÃ¤ndern
    batch_size=64, 
    validation_split=0.1
    )


# 7. Nach dem Training
# save multiple arrays into a single NPZ file, you can use the numpy.savez()

np.savez(
    "train_data.npz",
    x=x_train,
    y=y_train
)
print("Daten in train_data.npz gespeichert")


# 8. Evaluation
loss, acc = model.evaluate(x_test, y_test)
print(f"âœ… Test Accuracy (Ziffern 1â€“6): {acc:.4f}")

# 9. Speichern
model.save("mnist_1to6_model.h5")
print("ðŸ’¾ Modell gespeichert unter: mnist_1to6_model.h5")#
